// Procedure to calculate dot product of two vectors
function dot_product(v1, v2) {
  if (v1.length !== v2.length) {
    throw new Error("Vectors must have the same length");
  }

  let result = 0;
  for (let i = 0; i < v1.length; i++) {
    result += v1[i] * v2[i];
  }

  return result;
}

// Algorithm to determine if pairs of vectors are orthogonal
function areVectorsOrthogonal(vectors) {
  for (let i = 0; i < vectors.length; i += 2) {
    let v1 = vectors[i];
    let v2 = vectors[i + 1];

    // Call the dot_product procedure to get the dot product
    let dotProduct = dot_product(v1, v2);

    // Check if the dot product is zero (vectors are orthogonal)
    if (dotProduct === 0) {
      console.log(`Vectors ${v1} and ${v2} are orthogonal.`);
    } else {
      console.log(`Vectors ${v1} and ${v2} are not orthogonal.`);
    }
  }
}

// Example usage:
let vectorsToCheck = [
  [1, 0, 0], [0, 1, 0], // Example orthogonal vectors
  [2, 3, 1], [1, -1, -2], // Example non-orthogonal vectors
];

areVectorsOrthogonal(vectorsToCheck);


This algorithm first defines the dot_product procedure to calculate the dot product of two vectors. Then, it defines the areVectorsOrthogonal algorithm, which takes an array of vectors and checks whether pairs of vectors are orthogonal using the dot product. The example usage demonstrates how to use this algorithm with a set of vectors.






